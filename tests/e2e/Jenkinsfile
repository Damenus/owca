pipeline {
    agent any
    environment {
        PLAYBOOK = 'workloads/run_workloads.yaml'
        PROMETHEUS = 'http://100.64.176.12:9090'
        BUILD_COMMIT = "${GIT_COMMIT}"
        EXTRA_ANSIBLE_PARAMS = ""
        LABELS = "{additional_labels: {build_number: \"${BUILD_NUMBER}\", build_node_name: \"${NODE_NAME}\", build_commit: \"${GIT_COMMIT}\"}}"
		TAGS = ""
		RUN_WORKLOADS_SLEEP_TIME = 300
    }
    stages {
        stage('Kubernetes') {
            agent { label 'kubernetes' }
            environment {
                INVENTORY='tests/e2e/demo_scenarios/common/inventory-kubernetes.yaml'
                KUBERNETES_HOST='100.64.176.34'
                CRT_PATH = '/etc/kubernetes/ssl'
                CONFIG = 'wca_config_kubernetes.yaml'
            }
            steps {
                print('Reconfiguring wca...')
                copy_file("${WORKSPACE}/tests/e2e/demo_scenarios/common/${CONFIG}", "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")
                replace_in_config(true)
                copy_file("${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp", "/etc/wca/wca_config.yml", true)
                start_wca()
				//run_workloads(env.TAGS)
            }
            post {
                always {
                    stop_wca()
                }
            }
        }

        stage('Mesos') {
            agent { label 'mesos' }
            environment {
                INVENTORY='tests/e2e/demo_scenarios/common/inventory-mesos.yaml'
                MESOS_MASTER_HOST='100.64.176.23'
                CONFIG = 'wca_config_mesos.yaml'
            }
            steps {
                print('Reconfiguring wca...')
                copy_file("${WORKSPACE}/tests/e2e/demo_scenarios/common/${CONFIG}", "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")
                replace_in_config()
                copy_file("${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp", "/etc/wca/wca_config.yml", true)
                start_wca()
				//run_workloads(env.TAGS)
            }
            post {
                always {
                    stop_wca()
                }
            }
        }
    }
}

def copy_file(src, dest, sudo=false) {
    if(sudo){
        sh "sudo cp ${src} ${dest}"
    }
    else{
        sh "cp ${src} ${dest}"
    }
}

def replace_in_config(cert=false) {
    if(cert) {
        contentReplace(
            configs: [
                fileContentReplaceConfig(
                    configs: [
                        fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'CRT_PATH', replace: "${CRT_PATH}", matchCount: 0)
                    ],
                    fileEncoding: 'UTF-8',
                    filePath: "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")])
    }
    else {
        contentReplace(
            configs: [
                fileContentReplaceConfig(
                    configs: [
                        fileContentReplaceItemConfig( search: 'BUILD_COMMIT', replace: "${GIT_COMMIT}", matchCount: 0),
                        fileContentReplaceItemConfig( search: 'BUILD_NUMBER', replace: "${BUILD_NUMBER}", matchCount: 0)
                    ],
                    fileEncoding: 'UTF-8',
                    filePath: "${WORKSPACE}/tests/e2e/demo_scenarios/common/wca_config.yml.tmp")])
    }

}

def start_wca() {
    sh "sudo systemctl restart wca"
    sleep 5
    sh "sudo systemctl status wca"
}

def stop_wca() {
    sh "sudo systemctl stop wca"
}

def run_workloads(tags) {
    dir('workloads') {
        echo 'Start workloads'
        sh "ansible-playbook ${EXTRA_ANSIBLE_PARAMS} -i ${WORKSPACE}/demo_scenarios/run_workloads/inventory.yaml --tags=${tags} -e \"${LABELS}\" ${WORKSPACE}/${PLAYBOOK}"
    }
}

def stop_workloads() {
   echo 'Stop all workloads...'
   sh 'ansible-playbook  ${EXTRA_ANSIBLE_PARAMS}  -i ${WORKSPACE}/${INVENTORY} --tags=clean_jobs ${WORKSPACE}/${PLAYBOOK}'
   sleep 5 
}

def remove_file(path) {
    sh "sudo rm -f ${path}"
}
