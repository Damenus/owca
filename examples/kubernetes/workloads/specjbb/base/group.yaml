apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: specjbb-group
spec:
  serviceName: specjbb-group
  podManagementPolicy: Parallel
  replicas: 4
  selector:
    matchLabels:
      app: specjbb-group
  template:
    metadata:
      labels:
        app: specjbb-group
    spec:
      nodeSelector:
#        goal: service
        kubernetes.io/hostname: node38
      terminationGracePeriodSeconds: 0
      containers:
        - name: backend
          image: specjbb
          env:
            # discovery information
            - name: group_count
              valueFrom: {configMapKeyRef: { name: specjbb-config, key: specjbb.group.count }}
            - name: podname
              valueFrom: {fieldRef: {fieldPath: metadata.name}}
            # process information
            - name: cores
              valueFrom: {configMapKeyRef: { name: specjbb, key: cores }}
            # java_opts_inx
            - name: backendimeg
              valueFrom: {configMapKeyRef: { name: specjbb-java, key: backendimeg }}
            - name: backendinew
              valueFrom: {configMapKeyRef: { name: specjbb-java, key: backendinew }}

          # xmn_to_xms # read xmn xms params for JVM; here we assign 0.94 as experimentally checked parameter;
          command:
            - sh
            - -c
            - >
              identifier=${podname#$(GROUP_POD_NAME)-};
              echo group_identifier: $identifier;

              controller_identifier=$(($identifier/$group_count));
              target=$(CONTROLLER_POD_NAME)-${controller_identifier}.$(SERVICE_NAME);
              echo targeting: $target;

              group_identifier=$(($identifier%$group_count))
              group=GRP$group_identifier;
              echo group: $group group_identifier: $group_identifier;

              worker_size=$((($cores/$group_count)*2));

              gc_size=$(($cores / $group_count));

              mr_size=$(($group_count*2));

              maxheap=$((1500*(($cores-8)/$group_count)/1024));
              ram=$((($maxheap*125)/100));
              maxram=${ram}g;

              echo gc_size: $gc_size mr_size: $mr_size maxheap: $maxheap maxram: $maxram;

              margin=3;
              backendimeg=${maxheap}g;
              xmn_to_xms="0.94";
              xmn_to_xms="94/100";
              backendinew=$(($maxheap*$xmn_to_xms));
              backendinew=${backendinew}g;

              java
              -Dcom.sun.management.jmxremote.port=8686
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.ssl=false
              -Xmx${backendimeg}
              -Xms${backendimeg}
              -Xmn${backendinew}
              -XX:-UseAdaptiveSizePolicy
              -XX:MaxRAM=${maxram}
              -XX:MaxTenuringThreshold=15
              -XX:-UseBiasedLocking
              -XX:SurvivorRatio=10
              -XX:TargetSurvivorRatio=90
              -XX:ParallelGCThreads=${gc_size}
              -XX:+AggressiveOpts
              -XX:+AlwaysPreTouch
              -XX:+UseParallelOldGC
              -XX:+PrintGCDetails
              -XX:+PrintHeapAtGC
              -XX:+PrintGCTimeStamps
              -Dspecjbb.forkjoin.workers=$worker_size
              -Dspecjbb.mapreducer.pool.size=${mr_size}
              -Dspecjbb.controller.host=$target
              -jar /home/specjbb/specjbb2015.jar
              -m BACKEND
              -G ${group}
              -J JVM_A

        - name: injector
          image: specjbb
          env:
            # discovery information
            - name: group_count
              valueFrom: {configMapKeyRef: { name: specjbb-config, key: specjbb.group.count }}
            - name: podname
              valueFrom: {fieldRef: {fieldPath: metadata.name}}
            # java_opts_inx
            - name: tximeg
              valueFrom: {configMapKeyRef: { name: specjbb-java, key: tximeg }}
            - name: txinew
              valueFrom: {configMapKeyRef: { name: specjbb-java, key: txinew }}
            - name: txi.ParallelGCThreads
              valueFrom: {configMapKeyRef: { name: specjbb-java, key: txi.ParallelGCThreads }}
          command:
            - sh
            - -c
            - >
              identifier=${podname#$(GROUP_POD_NAME)-};
              echo group_identifier: $identifier;

              controller_identifier=$((controller_identifier/$group_count));
              target=$(CONTROLLER_POD_NAME)-${identifier}.$(SERVICE_NAME);
              echo targeting: $target;

              group_identifier=$(($identifier%$group_count))
              group=GRP$group_identifier;
              echo group: $group group_identifier: $group_identifier;

              java
              -Xmx${tximeg}
              -Xms${tximeg}
              -Xmn${txinew}
              -XX:+AlwaysPreTouch
              -XX:ParallelGCThreads=$(txi.ParallelGCThreads)
              -Dspecjbb.controller.host=$target
              -jar /home/specjbb/specjbb2015.jar
              -m TXINJECTOR
              -G ${group}
              -J JVM_B

  # required for workaround bug with kustomize https://github.com/kubernetes-sigs/kustomize/issues/504
  # when using commonLabels
  volumeClaimTemplates: []
