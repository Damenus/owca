# Inputes:
# - container_referenced_bytes_extended
# - container_memory_bandwidth_bytes_extended
# defined by cadvisor/prometheusrules.app.yaml (but provided by cadvisor)
#
# Parameters
# - delta membw = 3m
# - delta referenced_bytes = 3m
# - stability check (5 samples) = 5m
# - aggegrate max over time (20 samples) = 20m (equals to reset interval)
#
# Outputs:
# - app_wss
#
# FOR TESTING filter
# {container_label_io_kubernetes_pod_namespace="default", container_label_io_cri_containerd_kind="container"}
  
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cadvisor-wss
spec:
  groups:
  - name: wss-cadvisor
    rules:

    # How many misses is accepted (in regard to membw)
    - record: container_wss_miss_ratio_threshold
      expr: "0.01"
      labels:
        source: cadvisor


    - record: container_total_memory_bandwidth_delta_bytes
      expr: 'sum(delta(container_memory_bandwidth_bytes_extended[3m])) without (node_id)'
      labels:
        source: cadvisor

    - record: container_referenced_bytes_delta_bytes
      expr: 'delta(container_referenced_bytes_extended[3m])'
      labels:
        source: cadvisor

    # How many misses container has
    - record: container_wss_miss_ratio
      expr: '(container_referenced_bytes_delta_bytes / container_total_memory_bandwidth_delta_bytes) > 0'
      labels:
        source: cadvisor

    # Filter above misses data only when above accepted threshold
    - record: container_wss_ok_ratio
      expr: 'max_over_time(container_wss_miss_ratio[5m]) < scalar(container_wss_miss_ratio_threshold)'
      labels:
        source: cadvisor

    # What was a value of referenced then (when threshold is accepted)
    - record: container_wss_referenced_with_ok_ratio
      expr: 'container_referenced_bytes_extended and on(id) container_wss_ok_ratio'
      labels:
        source: cadvisor
    
    # Temporal: aggregate across time (average by time), find "high" number, high percentile (95%)
    # TODO: should be as long as reset interval 20m (or many reset intervals)
    - record: container_wss_ref_with_ok_over_time
      expr: 'quantile_over_time(0.95, container_wss_referenced_with_ok_ratio[20m])'
      labels:
        source: cadvisor

    - record: pod_wss_ref_with_ok_over_time
      expr: 'sum(container_wss_ref_with_ok_over_time) by (container_label_io_kubernetes_pod_namespace, exported_pod, label_app)'
      labels:
        source: cadvisor

    # ignore first 30m:1m >= 1 ignores first minute minutes of initialisation
    # lot - low_over_time
    - record: pod_wss_ref_with_ok_ratio_low_over_time
      expr: 'pod_wss_ref_with_ok_over_time and count_over_time(pod_wss_ref_with_ok_over_time[10m:1m]) >= 5'
      labels:
        source: cadvisor

    # label_app -> app
    - record: pod_wss_ref_with_ok_ratio_low_over_time_relabeled_app
      expr: 'label_replace(pod_wss_ref_with_ok_ratio_low_over_time, "app", "$0", "label_app", "(.*)+$")'
    # container_label_io_kubernetes_pod_namespace -> app_namespace
    - record: pod_wss_ref_with_ok_ratio_low_over_time_relabeled_namespace
      expr: 'label_replace(pod_wss_ref_with_ok_ratio_low_over_time_relabeled_app, "app_namespace", "$0", "container_label_io_kubernetes_pod_namespace", ".*")'

    # Spatial: aggregate over instances (tasks/pods) - again take maximum as pessimistic value
    - record: app_wss_v2
      expr: 'quantile(0.95, pod_wss_ref_with_ok_ratio_low_over_time_relabeled_namespace) by (app, source) / 1e9'
      labels:
        source: cadvisor
